<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tag-lib PUBLIC "-//Red Hat, Inc//DTD Knowledge Base 2.0//EN" "http://anonsvn.jboss.org/repos/jbosstools/trunk/jst/plugins/org.jboss.tools.jst.web.kb/resources/kbCustomTagLibSchema-1.0.dtd">
<tag-lib defaultPrefix="angularJS" ignoreCase="true">
	<component-extension>
		<attribute name="ng-click" extended="false">
			<description>The [b]ngClick[\b] allows you to specify custom behavior when element is clicked.</description>
		</attribute>
		<attribute name="data-ng-click" extended="false">
			<description>The [b]ngClick[\b] allows you to specify custom behavior when element is clicked.</description>
		</attribute>
		<attribute name="ng-bind" extended="false">
			<description>The [b]ngBind[\b] attribute tells Angular to replace the text content of the specified HTML element with the value of a given expression, and to update the text content when the value of that expression changes.</description>
		</attribute>
		<attribute name="data-ng-bind" extended="false">
			<description>The [b]ngBind[\b] attribute tells Angular to replace the text content of the specified HTML element with the value of a given expression, and to update the text content when the value of that expression changes.</description>
		</attribute>
		<attribute name="ng-bind-html" extended="false">
			<description>Creates a binding that will innerHTML the result of evaluating the expression into the current element in a secure way. By default, the innerHTML-ed content will be sanitized using the $sanitize service. To utilize this functionality, ensure that $sanitize is available, for example, by including ngSanitize in your module's dependencies (not in core Angular.) You may also bypass sanitization for values you know are safe. To do so, bind to an explicitly trusted value via $sce.trustAsHtml. See the example under Strict Contextual Escaping (SCE).</description>
		</attribute>
		<attribute name="data-ng-bind-html" extended="false">
			<description>Creates a binding that will innerHTML the result of evaluating the expression into the current element in a secure way. By default, the innerHTML-ed content will be sanitized using the $sanitize service. To utilize this functionality, ensure that $sanitize is available, for example, by including ngSanitize in your module's dependencies (not in core Angular.) You may also bypass sanitization for values you know are safe. To do so, bind to an explicitly trusted value via $sce.trustAsHtml. See the example under Strict Contextual Escaping (SCE).</description>
		</attribute>
		<attribute name="ng-bind-template" extended="false">
			<description>The [b]ngBindTemplate[\b] directive specifies that the element text content should be replaced with the interpolation of the template in the [b]ngBindTemplate[\b] attribute. Unlike [b]ngBind[\b], the [b]ngBindTemplate[\b] can contain multiple {{ }} expressions. This directive is needed since some HTML elements (such as TITLE and OPTION) cannot contain SPAN elements.</description>
		</attribute>
		<attribute name="data-ng-bind-template" extended="false">
			<description>The [b]ngBindTemplate[\b] directive specifies that the element text content should be replaced with the interpolation of the template in the [b]ngBindTemplate[\b] attribute. Unlike [b]ngBind[\b], the [b]ngBindTemplate[\b] can contain multiple {{ }} expressions. This directive is needed since some HTML elements (such as TITLE and OPTION) cannot contain SPAN elements.</description>
		</attribute>
		<attribute name="ng-class" extended="false">
			<description>The [b]ngClass[\b] allows you to set CSS classes on HTML an element, dynamically, by databinding an expression that represents all classes to be added.</description>
		</attribute>
		<attribute name="data-ng-class" extended="false">
			<description>The [b]ngClass[\b] allows you to set CSS classes on HTML an element, dynamically, by databinding an expression that represents all classes to be added.</description>
		</attribute>
		<attribute name="ng-class-even" extended="false">
			<description>The [b]ngClassOdd[\b] and [b]ngClassEven[\b] directives work exactly as [b]ngClass[\b], except it works in conjunction with [b]ngRepeat[\b] and takes affect only on odd (even) rows.</description>
		</attribute>
		<attribute name="data-ng-class-even" extended="false">
			<description>The [b]ngClassOdd[\b] and [b]ngClassEven[\b] directives work exactly as [b]ngClass[\b], except it works in conjunction with [b]ngRepeat[\b] and takes affect only on odd (even) rows.</description>
		</attribute>
		<attribute name="ng-class-odd" extended="false">
			<description>The [b]ngClassOdd[\b] and [b]ngClassEven[\b] directives work exactly as [b]ngClass[\b], except it works in conjunction with [b]ngRepeat[\b] and takes affect only on odd (even) rows.</description>
		</attribute>
		<attribute name="data-ng-class-odd" extended="false">
			<description>The [b]ngClassOdd[\b] and [b]ngClassEven[\b] directives work exactly as [b]ngClass[\b], except it works in conjunction with [b]ngRepeat[\b] and takes affect only on odd (even) rows.</description>
		</attribute>
		<attribute name="ng-cloak" extended="false">
			<description>The [b]ngCloak[\b] directive is used to prevent the Angular html template from being briefly displayed by the browser in its raw (uncompiled) form while your application is loading. Use this directive to avoid the undesirable flicker effect caused by the html template display.</description>
		</attribute>
		<attribute name="data-ng-cloak" extended="false">
			<description>The [b]ngCloak[\b] directive is used to prevent the Angular html template from being briefly displayed by the browser in its raw (uncompiled) form while your application is loading. Use this directive to avoid the undesirable flicker effect caused by the html template display.</description>
		</attribute>
		<attribute name="ng-controller" extended="false">
			<description>The [b]ngController[\b] directive attaches a controller class to the view. This is a key aspect of how angular supports the principles behind the Model-View-Controller design pattern.</description>
		</attribute>
		<attribute name="data-ng-controller" extended="false">
			<description>The [b]ngController[\b] directive attaches a controller class to the view. This is a key aspect of how angular supports the principles behind the Model-View-Controller design pattern.</description>
		</attribute>
		<attribute name="ng-dblclick" extended="false">
			<description>The [b]ngDblclick[\b] directive allows you to specify custom behavior on [b]dblclick[\b] event.</description>
		</attribute>
		<attribute name="data-ng-dblclick" extended="false">
			<description>The [b]ngDblclick[\b] directive allows you to specify custom behavior on [b]dblclick[\b] event.</description>
		</attribute>
		<attribute name="ng-form" extended="false">
			<description>Nestable alias of [b]form[\b] directive. HTML does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a sub-group of controls needs to be determined.</description>
		</attribute>
		<attribute name="data-ng-form" extended="false">
			<description>Nestable alias of [b]form[\b] directive. HTML does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a sub-group of controls needs to be determined.</description>
		</attribute>
		<attribute name="ng-hide" extended="false">
			<description>The [b]ngShow[\b] directive shows and hides the given HTML element conditionally based on the expression provided to the [b]ngHide[\b] attribute.</description>
		</attribute>
		<attribute name="data-ng-hide" extended="false">
			<description>The [b]ngShow[\b] directive shows and hides the given HTML element conditionally based on the expression provided to the [b]ngHide[\b] attribute.</description>
		</attribute>
		<attribute name="ng-if" extended="false">
			<description>The [b]ngIf[\b] directive removes and recreates a portion of the DOM tree (HTML) conditionally based on [b]"falsy"[\b] and [b]"truthy"[\b] values, respectively, evaluated within an {expression}. In other words, if the expression assigned to [b]ngIf evaluates to a false value[\b] then [b]the element is removed from the DOM[\b] and [b]if true[\b] then [b]a clone of the element is reinserted into the DOM[\b].</description>
		</attribute>
		<attribute name="data-ng-if" extended="false">
			<description>The [b]ngIf[\b] directive removes and recreates a portion of the DOM tree (HTML) conditionally based on [b]"falsy"[\b] and [b]"truthy"[\b] values, respectively, evaluated within an {expression}. In other words, if the expression assigned to [b]ngIf evaluates to a false value[\b] then [b]the element is removed from the DOM[\b] and [b]if true[\b] then [b]a clone of the element is reinserted into the DOM[\b].</description>
		</attribute>
		<attribute name="ng-include" extended="false">
			<description>Fetches, compiles and includes an external HTML fragment.</description>
		</attribute>
		<attribute name="data-ng-include" extended="false">
			<description>Fetches, compiles and includes an external HTML fragment.</description>
		</attribute>
		<attribute name="ng-init" extended="false">
			<description>The [b]ngInit[\b] directive specifies initialization tasks to be executed before the template enters execution mode during bootstrap.</description>
		</attribute>
		<attribute name="data-ng-init" extended="false">
			<description>The [b]ngInit[\b] directive specifies initialization tasks to be executed before the template enters execution mode during bootstrap.</description>
		</attribute>
		<attribute name="ng-keydown" extended="false">
			<description>This directive allows you to specify custom behavior on keydown event.</description>
		</attribute>
		<attribute name="data-ng-keydown" extended="false">
			<description>This directive allows you to specify custom behavior on keydown event.</description>
		</attribute>
		<attribute name="ng-keypress" extended="false">
			<description>This directive allows you to specify custom behavior on keypress event.</description>
		</attribute>
		<attribute name="data-ng-keypress" extended="false">
			<description>This directive allows you to specify custom behavior on keypress event.</description>
		</attribute>
		<attribute name="ng-keyup" extended="false">
			<description>This directive allows you to specify custom behavior on keyup event.</description>
		</attribute>
		<attribute name="data-ng-keyup" extended="false">
			<description>This directive allows you to specify custom behavior on keypup event.</description>
		</attribute>
		<attribute name="ng-mousedown" extended="false">
			<description>This directive allows you to specify custom behavior on mousedown event.</description>
		</attribute>
		<attribute name="data-ng-mousedown" extended="false">
			<description>This directive allows you to specify custom behavior on mousedown event.</description>
		</attribute>
		<attribute name="ng-mouseenter" extended="false">
			<description>This directive allows you to specify custom behavior on mouseenter event.</description>
		</attribute>
		<attribute name="data-ng-mouseenter" extended="false">
			<description>This directive allows you to specify custom behavior on mouseenter event.</description>
		</attribute>
		<attribute name="ng-mouseleave" extended="false">
			<description>This directive allows you to specify custom behavior on mouseleave event.</description>
		</attribute>
		<attribute name="data-ng-mouseleave" extended="false">
			<description>This directive allows you to specify custom behavior on mouseleave event.</description>
		</attribute>
		<attribute name="ng-mousemove" extended="false">
			<description>This directive allows you to specify custom behavior on mousemove event.</description>
		</attribute>
		<attribute name="data-ng-mousemove" extended="false">
			<description>This directive allows you to specify custom behavior on mousemove event.</description>
		</attribute>
		<attribute name="ng-mouseover" extended="false">
			<description>This directive allows you to specify custom behavior on mouseover event.</description>
		</attribute>
		<attribute name="data-ng-mouseover" extended="false">
			<description>This directive allows you to specify custom behavior on mouseover event.</description>
		</attribute>
		<attribute name="ng-mouseup" extended="false">
			<description>This directive allows you to specify custom behavior on mouseup event.</description>
		</attribute>
		<attribute name="data-ng-mouseup" extended="false">
			<description>This directive allows you to specify custom behavior on mouseup event.</description>
		</attribute>
		<attribute name="ng-non-bindable" extended="false">
			<description>Sometimes it is necessary to write code which looks like bindings but which should be left alone by angular. Use [b]ngNonBindable[\b] to make angular ignore a chunk of HTML.</description>
		</attribute>
		<attribute name="data-ng-non-bindable" extended="false">
			<description>Sometimes it is necessary to write code which looks like bindings but which should be left alone by angular. Use [b]ngNonBindable[\b] to make angular ignore a chunk of HTML.</description>
		</attribute>
		<attribute name="ng-repeat" extended="false">
			<description>The [b]ngRepeat[\b] directive instantiates a template once per item from a collection. Each template instance gets its own scope, where the given loop variable is set to the current collection item, and $index is set to the item index or key.</description>
		</attribute>
		<attribute name="data-ng-repeat" extended="false">
			<description>The [b]ngRepeat[\b] directive instantiates a template once per item from a collection. Each template instance gets its own scope, where the given loop variable is set to the current collection item, and $index is set to the item index or key.</description>
		</attribute>
		<attribute name="ng-repeat-start" extended="false"/>
		<attribute name="data-ng-repeat-start" extended="false"/>
		<attribute name="ng-repeat-end" extended="false"/>
		<attribute name="data-ng-repeat-end" extended="false"/>
		<attribute name="ng-selected" extended="false">
			<description>The HTML specs do not require browsers to preserve the special attributes such as selected. (The presence of them means true and absence means false) This prevents the angular compiler from correctly retrieving the binding expression. To solve this problem, use the [b]ngSelected[\b] directive.</description>
		</attribute>
		<attribute name="data-ng-selected" extended="false">
			<description>The HTML specs do not require browsers to preserve the special attributes such as selected. (The presence of them means true and absence means false) This prevents the angular compiler from correctly retrieving the binding expression. To solve this problem, use the [b]ngSelected[\b] directive.</description>
		</attribute>
		<attribute name="ng-show" extended="false">
			<description>The [b]ngShow[\b] directive shows and hides the given HTML element conditionally based on the expression provided to the [b]ngShow[\b] attribute.</description>
		</attribute>
		<attribute name="data-ng-show" extended="false">
			<description>The [b]ngShow[\b] directive shows and hides the given HTML element conditionally based on the expression provided to the [b]ngShow[\b] attribute.</description>
		</attribute>
		<attribute name="ng-style" extended="false">
			<description>The [b]ngStyle[\b] directive allows you to set CSS style on an HTML element conditionally.</description>
		</attribute>
		<attribute name="data-ng-style" extended="false">
			<description>The [b]ngStyle[\b] directive allows you to set CSS style on an HTML element conditionally.</description>
		</attribute>
		<attribute name="ng-transclude" extended="false">
			<description>Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.</description>
		</attribute>
		<attribute name="data-ng-transclude" extended="false">
			<description>Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.</description>
		</attribute>
	</component-extension>
	<component-extension attributeProvider="org.jboss.tools.jst.web.kb.internal.taglib.html.angular.NgAppAttributeProvider"/>
	<component-extension attributeProvider="org.jboss.tools.jst.web.kb.internal.taglib.html.angular.NgClassAttributeProvider"/>
	<component-extension attributeProvider="org.jboss.tools.jst.web.kb.internal.taglib.html.angular.NameAttributeProvider"/>
	<component-extension attributeProvider="org.jboss.tools.jst.web.kb.internal.taglib.html.angular.NgPluralizeAttributeProvider"/>
	<component-extension attributeProvider="org.jboss.tools.jst.web.kb.internal.taglib.html.angular.NgSwitchAttributeProvider"/>

	<component extended="false" name="html">
		<attribute name="ng-csp" extended="false">
			<description>Enables [b]CSP (Content Security Policy)[\b] support.</description>
		</attribute>
		<attribute name="data-ng-csp" extended="false">
			<description>Enables [b]CSP (Content Security Policy)[\b] support.</description>
		</attribute>
	</component>
	<component extended="false" name="details">
		<attribute name="ng-open" extended="false">
			<description>The HTML specs do not require browsers to preserve the special attributes such as open. (The presence of them means true and absence means false) This prevents the angular compiler from correctly retrieving the binding expression. To solve this problem, use the [b]ngOpen[/b] directive.</description>
		</attribute>
		<attribute name="data-ng-open" extended="false">
			<description>The HTML specs do not require browsers to preserve the special attributes such as open. (The presence of them means true and absence means false) This prevents the angular compiler from correctly retrieving the binding expression. To solve this problem, use the [b]ngOpen[/b] directive.</description>
		</attribute>
	</component>
	<component name="script" extended="false">
		<attribute name="type" extended="false">
			<proposal type="enumeration">
				<param value="text/ng-template" />
			</proposal>
		</attribute>
	</component>

    <component extended="false" name="form" attributeProvider="org.jboss.tools.jst.web.kb.internal.taglib.html.angular.NgSubmitAttributeProvider"/>
	<component extended="false" name="input" attributeProvider="org.jboss.tools.jst.web.kb.internal.taglib.html.angular.NgModelAttributeProvider,org.jboss.tools.jst.web.kb.internal.taglib.html.angular.NgDisabledAttributeProvider,org.jboss.tools.jst.web.kb.internal.taglib.html.angular.NgAnyInputAttributeProvider, org.jboss.tools.jst.web.kb.internal.taglib.html.angular.NgBlurAttributeProvider, org.jboss.tools.jst.web.kb.internal.taglib.html.angular.NgInputAttributeProvider, org.jboss.tools.jst.web.kb.internal.taglib.html.angular.NgInputCheckboxAttributeProvider, org.jboss.tools.jst.web.kb.internal.taglib.html.angular.NgInputDefaultAttributeProvider, org.jboss.tools.jst.web.kb.internal.taglib.html.angular.NgInputRadioAttributeProvider, org.jboss.tools.jst.web.kb.internal.taglib.html.angular.NgInputTextAttributeProvider"/>
	<component extended="false" name="window" attributeProvider="org.jboss.tools.jst.web.kb.internal.taglib.html.angular.NgBlurAttributeProvider"/>
	<component extended="false" name="select" attributeProvider="org.jboss.tools.jst.web.kb.internal.taglib.html.angular.NgSelectAttributeProvider,org.jboss.tools.jst.web.kb.internal.taglib.html.angular.NgModelAttributeProvider,org.jboss.tools.jst.web.kb.internal.taglib.html.angular.NgBlurAttributeProvider"/>
	<component extended="false" name="textarea" attributeProvider="org.jboss.tools.jst.web.kb.internal.taglib.html.angular.NgTextareaAttributeProvider,org.jboss.tools.jst.web.kb.internal.taglib.html.angular.NgModelAttributeProvider,org.jboss.tools.jst.web.kb.internal.taglib.html.angular.NgBlurAttributeProvider"/>
	<component extended="false" name="a" attributeProvider="org.jboss.tools.jst.web.kb.internal.taglib.html.angular.NgLinkAttributeProvider,org.jboss.tools.jst.web.kb.internal.taglib.html.angular.NgBlurAttributeProvider"/>
	<component extended="false" name="button" attributeProvider="org.jboss.tools.jst.web.kb.internal.taglib.html.angular.NgDisabledAttributeProvider"/>
	<component extended="false" name="img" attributeProvider="org.jboss.tools.jst.web.kb.internal.taglib.html.angular.NgImageAttributeProvider"/>
	
</tag-lib>